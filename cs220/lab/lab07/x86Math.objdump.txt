
x86Math:     file format elf64-x86-64


Disassembly of section .init:

00000000004003e0 <_init>:
_init():
  4003e0:	48 83 ec 08          	sub    $0x8,%rsp
  4003e4:	48 8b 05 45 06 20 00 	mov    0x200645(%rip),%rax        # 600a30 <_DYNAMIC+0x1d0>
  4003eb:	48 85 c0             	test   %rax,%rax
  4003ee:	74 05                	je     4003f5 <_init+0x15>
  4003f0:	e8 3b 00 00 00       	callq  400430 <__gmon_start__@plt>
  4003f5:	48 83 c4 08          	add    $0x8,%rsp
  4003f9:	c3                   	retq   

Disassembly of section .plt:

0000000000400400 <printf@plt-0x10>:
  400400:	ff 35 3a 06 20 00    	pushq  0x20063a(%rip)        # 600a40 <_GLOBAL_OFFSET_TABLE_+0x8>
  400406:	ff 25 3c 06 20 00    	jmpq   *0x20063c(%rip)        # 600a48 <_GLOBAL_OFFSET_TABLE_+0x10>
  40040c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400410 <printf@plt>:
  400410:	ff 25 3a 06 20 00    	jmpq   *0x20063a(%rip)        # 600a50 <_GLOBAL_OFFSET_TABLE_+0x18>
  400416:	68 00 00 00 00       	pushq  $0x0
  40041b:	e9 e0 ff ff ff       	jmpq   400400 <_init+0x20>

0000000000400420 <__libc_start_main@plt>:
  400420:	ff 25 32 06 20 00    	jmpq   *0x200632(%rip)        # 600a58 <_GLOBAL_OFFSET_TABLE_+0x20>
  400426:	68 01 00 00 00       	pushq  $0x1
  40042b:	e9 d0 ff ff ff       	jmpq   400400 <_init+0x20>

0000000000400430 <__gmon_start__@plt>:
  400430:	ff 25 2a 06 20 00    	jmpq   *0x20062a(%rip)        # 600a60 <_GLOBAL_OFFSET_TABLE_+0x28>
  400436:	68 02 00 00 00       	pushq  $0x2
  40043b:	e9 c0 ff ff ff       	jmpq   400400 <_init+0x20>

0000000000400440 <strtol@plt>:
  400440:	ff 25 22 06 20 00    	jmpq   *0x200622(%rip)        # 600a68 <_GLOBAL_OFFSET_TABLE_+0x30>
  400446:	68 03 00 00 00       	pushq  $0x3
  40044b:	e9 b0 ff ff ff       	jmpq   400400 <_init+0x20>

Disassembly of section .text:

0000000000400450 <_start>:
_start():
  400450:	31 ed                	xor    %ebp,%ebp
  400452:	49 89 d1             	mov    %rdx,%r9
  400455:	5e                   	pop    %rsi
  400456:	48 89 e2             	mov    %rsp,%rdx
  400459:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40045d:	50                   	push   %rax
  40045e:	54                   	push   %rsp
  40045f:	49 c7 c0 40 06 40 00 	mov    $0x400640,%r8
  400466:	48 c7 c1 d0 05 40 00 	mov    $0x4005d0,%rcx
  40046d:	48 c7 c7 46 05 40 00 	mov    $0x400546,%rdi
  400474:	e8 a7 ff ff ff       	callq  400420 <__libc_start_main@plt>
  400479:	f4                   	hlt    
  40047a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400480 <deregister_tm_clones>:
deregister_tm_clones():
  400480:	b8 87 0a 60 00       	mov    $0x600a87,%eax
  400485:	55                   	push   %rbp
  400486:	48 2d 80 0a 60 00    	sub    $0x600a80,%rax
  40048c:	48 83 f8 0e          	cmp    $0xe,%rax
  400490:	48 89 e5             	mov    %rsp,%rbp
  400493:	76 1b                	jbe    4004b0 <deregister_tm_clones+0x30>
  400495:	b8 00 00 00 00       	mov    $0x0,%eax
  40049a:	48 85 c0             	test   %rax,%rax
  40049d:	74 11                	je     4004b0 <deregister_tm_clones+0x30>
  40049f:	5d                   	pop    %rbp
  4004a0:	bf 80 0a 60 00       	mov    $0x600a80,%edi
  4004a5:	ff e0                	jmpq   *%rax
  4004a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4004ae:	00 00 
  4004b0:	5d                   	pop    %rbp
  4004b1:	c3                   	retq   
  4004b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4004b9:	1f 84 00 00 00 00 00 

00000000004004c0 <register_tm_clones>:
register_tm_clones():
  4004c0:	be 80 0a 60 00       	mov    $0x600a80,%esi
  4004c5:	55                   	push   %rbp
  4004c6:	48 81 ee 80 0a 60 00 	sub    $0x600a80,%rsi
  4004cd:	48 c1 fe 03          	sar    $0x3,%rsi
  4004d1:	48 89 e5             	mov    %rsp,%rbp
  4004d4:	48 89 f0             	mov    %rsi,%rax
  4004d7:	48 c1 e8 3f          	shr    $0x3f,%rax
  4004db:	48 01 c6             	add    %rax,%rsi
  4004de:	48 d1 fe             	sar    %rsi
  4004e1:	74 15                	je     4004f8 <register_tm_clones+0x38>
  4004e3:	b8 00 00 00 00       	mov    $0x0,%eax
  4004e8:	48 85 c0             	test   %rax,%rax
  4004eb:	74 0b                	je     4004f8 <register_tm_clones+0x38>
  4004ed:	5d                   	pop    %rbp
  4004ee:	bf 80 0a 60 00       	mov    $0x600a80,%edi
  4004f3:	ff e0                	jmpq   *%rax
  4004f5:	0f 1f 00             	nopl   (%rax)
  4004f8:	5d                   	pop    %rbp
  4004f9:	c3                   	retq   
  4004fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400500 <__do_global_dtors_aux>:
__do_global_dtors_aux():
  400500:	80 3d 79 05 20 00 00 	cmpb   $0x0,0x200579(%rip)        # 600a80 <__TMC_END__>
  400507:	75 11                	jne    40051a <__do_global_dtors_aux+0x1a>
  400509:	55                   	push   %rbp
  40050a:	48 89 e5             	mov    %rsp,%rbp
  40050d:	e8 6e ff ff ff       	callq  400480 <deregister_tm_clones>
  400512:	5d                   	pop    %rbp
  400513:	c6 05 66 05 20 00 01 	movb   $0x1,0x200566(%rip)        # 600a80 <__TMC_END__>
  40051a:	f3 c3                	repz retq 
  40051c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400520 <frame_dummy>:
frame_dummy():
  400520:	bf 58 08 60 00       	mov    $0x600858,%edi
  400525:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400529:	75 05                	jne    400530 <frame_dummy+0x10>
  40052b:	eb 93                	jmp    4004c0 <register_tm_clones>
  40052d:	0f 1f 00             	nopl   (%rax)
  400530:	b8 00 00 00 00       	mov    $0x0,%eax
  400535:	48 85 c0             	test   %rax,%rax
  400538:	74 f1                	je     40052b <frame_dummy+0xb>
  40053a:	55                   	push   %rbp
  40053b:	48 89 e5             	mov    %rsp,%rbp
  40053e:	ff d0                	callq  *%rax
  400540:	5d                   	pop    %rbp
  400541:	e9 7a ff ff ff       	jmpq   4004c0 <register_tm_clones>

0000000000400546 <main>:
main():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:9
int add(int x, int y);
int mult(int x, int y);
int subtract(int x, int y);
int divide(int x, int y);

int main(int argc, char **argv) {
  400546:	48 83 ec 08          	sub    $0x8,%rsp
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:10
	if (argc < 2) {
  40054a:	83 ff 01             	cmp    $0x1,%edi
  40054d:	7f 19                	jg     400568 <main+0x22>
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:11
		printf("Invoke as %s <number>\n",argv[0]);
  40054f:	48 8b 36             	mov    (%rsi),%rsi
  400552:	bf 54 06 40 00       	mov    $0x400654,%edi
  400557:	b8 00 00 00 00       	mov    $0x0,%eax
  40055c:	e8 af fe ff ff       	callq  400410 <printf@plt>
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:12
		return 1;
  400561:	b8 01 00 00 00       	mov    $0x1,%eax
  400566:	eb 47                	jmp    4005af <main+0x69>
atoi():
/usr/include/stdlib.h:280
#ifdef __USE_EXTERN_INLINES
__BEGIN_NAMESPACE_STD
__extern_inline int
__NTH (atoi (const char *__nptr))
{
  return (int) strtol (__nptr, (char **) NULL, 10);
  400568:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
  40056c:	ba 0a 00 00 00       	mov    $0xa,%edx
  400571:	be 00 00 00 00       	mov    $0x0,%esi
  400576:	e8 c5 fe ff ff       	callq  400440 <strtol@plt>
  40057b:	48 89 c6             	mov    %rax,%rsi
mult():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:49
	}

	int mult(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1*op2;
  40057e:	89 c7                	mov    %eax,%edi
  400580:	0f af f8             	imul   %eax,%edi
  400583:	8d 04 85 00 00 00 00 	lea    0x0(,%rax,4),%eax
subtract():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:42
	}

	int subtract(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1-op2;
  40058a:	29 c7                	sub    %eax,%edi
add():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:35
#else

	int add(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1+op2;
  40058c:	83 c7 04             	add    $0x4,%edi
subtract():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:42
	}

	int subtract(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1-op2;
  40058f:	8d 4e fe             	lea    -0x2(%rsi),%ecx
divide():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:56
	}

	int divide(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1/op2;
  400592:	89 f8                	mov    %edi,%eax
  400594:	99                   	cltd   
  400595:	f7 f9                	idiv   %ecx
  400597:	89 c1                	mov    %eax,%ecx
main():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:21
	int term=mult(4,x);
	ans=subtract(ans,term);
	ans=add(ans,4);
	term=subtract(x,2);
	int check=divide(ans,term);
	printf("x=%d, x squared - 4x + 4 =%d divided by x-2=%d\n",x,ans,check);
  400599:	89 fa                	mov    %edi,%edx
  40059b:	bf 70 06 40 00       	mov    $0x400670,%edi
  4005a0:	b8 00 00 00 00       	mov    $0x0,%eax
  4005a5:	e8 66 fe ff ff       	callq  400410 <printf@plt>
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:22
	return 0;
  4005aa:	b8 00 00 00 00       	mov    $0x0,%eax
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:23
}
  4005af:	48 83 c4 08          	add    $0x8,%rsp
  4005b3:	c3                   	retq   

00000000004005b4 <add>:
add():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:35
#else

	int add(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1+op2;
  4005b4:	8d 04 37             	lea    (%rdi,%rsi,1),%eax
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:37
		return res;
	}
  4005b7:	c3                   	retq   

00000000004005b8 <subtract>:
subtract():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:42

	int subtract(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1-op2;
  4005b8:	89 f8                	mov    %edi,%eax
  4005ba:	29 f0                	sub    %esi,%eax
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:44
		return res;
	}
  4005bc:	c3                   	retq   

00000000004005bd <mult>:
mult():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:49

	int mult(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1*op2;
  4005bd:	89 f8                	mov    %edi,%eax
  4005bf:	0f af c6             	imul   %esi,%eax
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:51
		return res;
	}
  4005c2:	c3                   	retq   

00000000004005c3 <divide>:
divide():
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:56

	int divide(int x, int y) {
		int op1=x;
		int op2=y;
		int res=op1/op2;
  4005c3:	89 f8                	mov    %edi,%eax
  4005c5:	99                   	cltd   
  4005c6:	f7 fe                	idiv   %esi
/home/ebaule1/Desktop/sp17/cs220/lab/lab07/x86Math.c:58
		return res;
	}
  4005c8:	c3                   	retq   
  4005c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004005d0 <__libc_csu_init>:
__libc_csu_init():
  4005d0:	41 57                	push   %r15
  4005d2:	41 89 ff             	mov    %edi,%r15d
  4005d5:	41 56                	push   %r14
  4005d7:	49 89 f6             	mov    %rsi,%r14
  4005da:	41 55                	push   %r13
  4005dc:	49 89 d5             	mov    %rdx,%r13
  4005df:	41 54                	push   %r12
  4005e1:	4c 8d 25 60 02 20 00 	lea    0x200260(%rip),%r12        # 600848 <__frame_dummy_init_array_entry>
  4005e8:	55                   	push   %rbp
  4005e9:	48 8d 2d 60 02 20 00 	lea    0x200260(%rip),%rbp        # 600850 <__init_array_end>
  4005f0:	53                   	push   %rbx
  4005f1:	4c 29 e5             	sub    %r12,%rbp
  4005f4:	31 db                	xor    %ebx,%ebx
  4005f6:	48 c1 fd 03          	sar    $0x3,%rbp
  4005fa:	48 83 ec 08          	sub    $0x8,%rsp
  4005fe:	e8 dd fd ff ff       	callq  4003e0 <_init>
  400603:	48 85 ed             	test   %rbp,%rbp
  400606:	74 1e                	je     400626 <__libc_csu_init+0x56>
  400608:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40060f:	00 
  400610:	4c 89 ea             	mov    %r13,%rdx
  400613:	4c 89 f6             	mov    %r14,%rsi
  400616:	44 89 ff             	mov    %r15d,%edi
  400619:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40061d:	48 83 c3 01          	add    $0x1,%rbx
  400621:	48 39 eb             	cmp    %rbp,%rbx
  400624:	75 ea                	jne    400610 <__libc_csu_init+0x40>
  400626:	48 83 c4 08          	add    $0x8,%rsp
  40062a:	5b                   	pop    %rbx
  40062b:	5d                   	pop    %rbp
  40062c:	41 5c                	pop    %r12
  40062e:	41 5d                	pop    %r13
  400630:	41 5e                	pop    %r14
  400632:	41 5f                	pop    %r15
  400634:	c3                   	retq   
  400635:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  40063c:	00 00 00 00 

0000000000400640 <__libc_csu_fini>:
__libc_csu_fini():
  400640:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000400644 <_fini>:
_fini():
  400644:	48 83 ec 08          	sub    $0x8,%rsp
  400648:	48 83 c4 08          	add    $0x8,%rsp
  40064c:	c3                   	retq   
