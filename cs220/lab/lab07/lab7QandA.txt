Answer questions 1-4 with the optimization set at its original value, "OPT=-00".

1. Scan through the x86Math.s and x86Math.objdump.txt files side by side.
	A. Do these two files contain similar sets of x86 instructions for the "add" function? 	 Yes
	B. Do both files refer back to the original C code from which they were derived? 	 Yes
	C. Does the gdb disassembly match the x86 instructions in both the .s and objdump files? Yes
	D. Which format of all three do you find easier and why? 
		C Code is much easier to read than assembly instructions, which is presumably why people use it since they are effectively doing the same things. 
		
	
2. How many assembler instructions are required for:
	A. the "add" function :		15 instructions
	B. the "subtract" function:	14 instructions
	
3. How many bytes are needed for the x86 version of the x86Math program? (You can find this by scrolling
	to the bottom of file x86Math.s and finding the hex value associated with the last instruction in 
	the file.) 0x016e
	
4. Find the x86 add instruction that adds op1+op2 in the add function.
	A. What line number is that instruction at in the x86Math.s file? : 154
	B. What hexadecimal address contains that instruction from the x86Math.objdump.txt file? : 40063d
	
5. In gdb, just before you execute the instruction at 0x000000000040063d for the first time:
	A. What is the value in the "edx" register? : 0
	B. What is the value in the "eax" register? : 4
	C. After you execute the instruction, what is the value in the "eax" register? : 4
	
Answer questions 6-8 with the optimization variable set to "OPT=-O1" to do some optimization

6. Is it still possible to map directly from C code to x86 assembler instructions? What has happened?
	Yes, the C code is still mapped properly. "The compiler performs optimization based on the knowledge it has of the program. Compiling multiple files at once to a single output file mode allows the compiler to use information gained from all of the files when compiling each of them." taken from https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options.
	
	
7. In gdb, what x86 instruction is about to get executed when you reach the first breakpoint in the "add" function?
	The add instruction is going to be executed next
	 
8. 
	A. How many bytes are needed for this x86 version of the x86Math program? 0x0082 
	B. How does this compare to the length of the previous version? About 0x00EC less
	C. Why is there a difference? Because the gcc flag sacrifices compile time for performance, and takes a longer time trying to find a way to compile your code that will increase performance.
	 
Answer questions 9-10 with the optimization value set to "OPT=-O0 -DSIMPLE"

9. 
	A. How many bytes are needed for this x86 version of the x86Math program? 0x0126
	B. How does this compare to previous versions? It is not as optimized as -o1, but faster than -o0
	C. Does the optimizer do a better job than a human in this case? Yes

10. Compare the x86 instructions for the add function with the x86 instructions for the add function in the
	first part of the lab. What is the main difference? To reduce the total instruction count, the compiler relocates the add instructions instead of stepping through them.
